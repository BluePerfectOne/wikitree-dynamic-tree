commit aa4e0d6e5cf92ca461ae5feebfe406e03190861f
Author: Ian Beacall <ian@shogenapps.com>
Date:   Sat Jul 22 23:06:36 2023 +0900

    Add filters

diff --git a/.vscode/sftp.json b/.vscode/sftp.json
new file mode 100644
index 0000000..d018f78
--- /dev/null
+++ b/.vscode/sftp.json
@@ -0,0 +1,12 @@
+{
+    "name": "WikiTree",
+    "host": "apps.wikitree.com",
+    "protocol": "sftp",
+    "port": 22,
+    "username": "beacall6",
+    "password": "bohbah7faiXa",
+    "remotePath": "/www/riel/",
+    "uploadOnSave": true,
+    "useTempFile": false,
+    "openSsh": false
+}
diff --git a/views/cc7/css/cc7.css b/views/cc7/css/cc7.css
index f956c17..b43556e 100644
--- a/views/cc7/css/cc7.css
+++ b/views/cc7/css/cc7.css
@@ -713,6 +713,44 @@ div.cc7Table #savePeople {
   font-size: 0.8em;
 }
 
+table tr.cc7filter-row input[type="text"] {
+  width: 100%;
+  box-sizing: border-box;
+  padding: 0.1em;
+  border: 1px solid #aaa;
+  border-radius: 0.25em;
+  font-size: 1em;
+  line-height: 1.5em;
+  margin: 0;
+  background-color: #fff;
+  color: #000;
+  -webkit-appearance: none;
+  -moz-appearance: none;
+  appearance: none;
+  -webkit-transition: border-color 0.2s ease-in-out;
+  -moz-transition: border-color 0.2s ease-in-out;
+  transition: border-color 0.2s ease-in-out;
+}
+#clearTableFiltersButton {
+  font-size: 0.8em;
+  padding: 7px 15px;
+  font-size: 0.9em;
+  text-align: center;
+  display: inline-block;
+}
+.cc7filter-row input.numeric-input {
+  width: 2em !important;
+  min-width: auto;
+}
+.cc7filter-row input.date-input {
+  width: 6em !important;
+  min-width: auto;
+}
+
+.cc7filter-row input.text-input {
+  width: 100%;
+}
+
 /* ---------------------------------------------------------
    Print styles
    ---------------------------------------------------------*/
diff --git a/views/cc7/js/cc7.js b/views/cc7/js/cc7.js
index dbcc787..d1a029d 100644
--- a/views/cc7/js/cc7.js
+++ b/views/cc7/js/cc7.js
@@ -2178,6 +2178,7 @@ export class CC7 {
         }
 
         CC7.cc7excelOut();
+        CC7.addFiltersToTable();
     }
 
     static getApproxDate(theDate) {
@@ -3494,4 +3495,206 @@ export class CC7 {
     static setCookie(name, value, options) {
         return WikiTreeAPI.cookie(name, value, options);
     }
+
+    static repositionFilterRow(table) {
+        const hasTbody = table.querySelector("tbody") !== null;
+        const hasThead = table.querySelector("thead") !== null;
+        const headerRow = hasThead
+            ? table.querySelector("thead tr:first-child")
+            : hasTbody
+            ? table.querySelector("tbody tr:first-child")
+            : table.querySelector("tr:first-child");
+        const filterRow = table.querySelector(".cc7filter-row");
+        if (filterRow) {
+            if (filterRow.nextSibling !== headerRow) {
+                headerRow.parentElement.insertBefore(filterRow, headerRow.nextSibling);
+            }
+        }
+    }
+
+    static addFiltersToTable(aTable = null) {
+        let tables;
+        if (aTable) {
+            tables = [aTable];
+        } else {
+            tables = document.querySelectorAll("#peopleTable");
+        }
+        tables.forEach((table) => {
+            const hasTbody = table.querySelector("tbody") !== null;
+            const hasThead = table.querySelector("thead") !== null;
+            const headerRow = hasThead
+                ? table.querySelector("thead tr:first-child")
+                : hasTbody
+                ? table.querySelector("tbody tr:first-child")
+                : table.querySelector("tr:first-child");
+
+            let headerCells = headerRow.querySelectorAll("th");
+            const originalHeaderCells = headerCells;
+            let isFirstRowHeader = headerCells.length > 0;
+            if (!isFirstRowHeader) {
+                const firstRowCells = headerRow.querySelectorAll("td");
+                const dummyHeaderRow = document.createElement("tr");
+                firstRowCells.forEach(() => {
+                    const emptyHeaderCell = document.createElement("th");
+                    dummyHeaderRow.appendChild(emptyHeaderCell);
+                });
+                headerRow.parentElement.insertBefore(dummyHeaderRow, headerRow);
+                headerCells = dummyHeaderRow.querySelectorAll("th");
+            }
+
+            const filterRow = document.createElement("tr");
+            filterRow.classList.add("cc7filter-row");
+
+            headerCells.forEach((headerCell, i) => {
+                const filterCell = document.createElement("th");
+                const headerCellText = headerCell.textContent.trim();
+                const originalHeaderCellText = originalHeaderCells[i].textContent.trim();
+                if (!["Pos."].includes(headerCellText) && !["Pos.", ""].includes(originalHeaderCellText)) {
+                    console.log(headerCellText);
+                    const filterInput = document.createElement("input");
+                    filterInput.type = "text";
+                    filterInput.classList.add("filter-input");
+
+                    // Check the length of the text in the first ten cells of the column
+                    let maxLength = 0;
+                    const rows = hasTbody ? table.querySelectorAll("tbody tr") : table.querySelectorAll("tr");
+                    for (let j = 1; j < Math.min(10, rows.length); j++) {
+                        const cellText = rows[j].children[i].textContent.trim();
+                        maxLength = Math.max(maxLength, cellText.length);
+                    }
+
+                    if (maxLength <= 2) {
+                        filterInput.classList.add("numeric-input");
+                    } else if (maxLength == 10) {
+                        filterInput.classList.add("date-input");
+                    } else {
+                        filterInput.classList.add("text-input");
+                    }
+
+                    filterCell.appendChild(filterInput);
+                }
+                filterRow.appendChild(filterCell);
+            });
+
+            if (isFirstRowHeader) {
+                headerRow.parentElement.insertBefore(filterRow, headerRow.nextSibling);
+            } else {
+                headerRow.parentElement.insertBefore(filterRow, headerRow);
+            }
+
+            const sortArrows = table.querySelectorAll(".sortheader");
+            sortArrows.forEach((arrow) => {
+                arrow.addEventListener("click", () => {
+                    setTimeout(() => {
+                        repositionFilterRow(table);
+                    }, 100);
+                });
+            });
+        });
+
+        const filterFunction = () => {
+            const table = tables[0];
+            const hasTbody = table.querySelector("tbody") !== null;
+            const hasThead = table.querySelector("thead") !== null;
+            const rows = hasTbody ? table.querySelectorAll("tbody tr") : table.querySelectorAll("tr");
+            const filterInputs = table.querySelectorAll(".filter-input");
+
+            rows.forEach((row, rowIndex) => {
+                // Skip first row only if there's no 'thead'
+                if (!hasThead && rowIndex === 0) {
+                    return;
+                }
+
+                // Skip if row is a filter-row or contains 'th' elements
+                if (row.classList.contains("cc7filter-row") || row.querySelector("th")) {
+                    return;
+                }
+
+                let displayRow = true;
+
+                filterInputs.forEach((input, inputIndex) => {
+                    let text = input.value.toLowerCase().replace("°", "");
+                    const columnIndex = Array.from(input.parentElement.parentElement.children).indexOf(
+                        input.parentElement
+                    );
+                    let cellText = row.children[columnIndex].textContent.toLowerCase().replace("°", "");
+                    let isDateColumn = input.classList.contains("date-input");
+                    let isNumericColumn = input.classList.contains("numeric-input");
+
+                    // If the column is numeric and the input is a number or a comparison, perform the appropriate check
+                    if (
+                        (isNumericColumn || (isDateColumn && text.length >= 4)) &&
+                        (text === "" || !isNaN(parseFloat(text)) || text[0] === ">" || text[0] === "<")
+                    ) {
+                        if (text !== "") {
+                            let operator = text[0];
+                            if (operator === ">" || operator === "<") {
+                                text = parseFloat(text.slice(1)); // Remove the operator from the text
+                            } else {
+                                operator = "=="; // Default to equality if there's no operator
+                                text = parseFloat(text);
+                            }
+                            if (isDateColumn) {
+                                let year = cellText.slice(0, 4); // Get the year part of the date
+                                if (year.endsWith("s")) {
+                                    year = year.slice(0, -1); // Remove the 's' for decade dates
+                                }
+                                cellText = parseFloat(year);
+                            } else {
+                                cellText = parseFloat(cellText);
+                            }
+                            if (!eval(cellText + operator + text)) {
+                                displayRow = false;
+                            }
+                        }
+                    } else {
+                        if (!cellText.includes(text)) {
+                            displayRow = false;
+                        }
+                    }
+                });
+
+                row.style.display = displayRow ? "" : "none";
+            });
+        };
+
+        function updateClearFiltersButtonVisibility() {
+            const anyFilterHasText = Array.from(document.querySelectorAll(".filter-input")).some(
+                (input) => input.value.trim() !== ""
+            );
+
+            clearFiltersButton.style.display = anyFilterHasText ? "inline-block" : "none";
+        }
+
+        document.querySelectorAll(".filter-input").forEach((input) => {
+            input.addEventListener("input", () => {
+                filterFunction();
+                updateClearFiltersButtonVisibility();
+            });
+        });
+
+        // Add Clear Filters button
+        const clearFiltersButton = document.createElement("button");
+        clearFiltersButton.textContent = "X";
+        clearFiltersButton.title = "Clear Filters";
+        clearFiltersButton.id = "clearTableFiltersButton";
+        //  clearFiltersButton.style.position = "absolute";
+        clearFiltersButton.addEventListener("click", () => {
+            document.querySelectorAll(".filter-input").forEach((input) => {
+                input.value = "";
+            });
+            filterFunction();
+            updateClearFiltersButtonVisibility();
+        });
+
+        // Position the Clear Filters button
+        const filterRow = tables[0].querySelector(".cc7filter-row");
+        const filterRowRect = filterRow.getBoundingClientRect();
+
+        $(clearFiltersButton).insertAfter($("#wideTableButton"));
+        clearFiltersButton.textContent = "Clear Filters";
+
+        // Initially hide the button
+        clearFiltersButton.style.display = "none";
+    }
 }
